"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const fs = require('fs');

const os = require('os');

const path = require('path');

const dayjs = require('dayjs');

const debug = require('debug')('preview-email');

const nodemailer = require('nodemailer');

const open = require('open');

const pify = require('pify');

const pug = require('pug');

const uuid = require('uuid');

const {
  simpleParser
} = require('mailparser');

const writeFile = pify(fs.writeFile);
const transport = nodemailer.createTransport({
  streamTransport: true,
  buffer: true
});
const templateFilePath = path.join(__dirname, '..', 'template.pug');
const renderFilePromise = pify(pug.renderFile);

const previewEmail = async (message, options) => {
  options = _objectSpread({
    dir: os.tmpdir(),
    id: uuid.v4(),
    open: {
      wait: false
    },
    template: templateFilePath,
    urlTransform: path => `file://${path}`
  }, options);
  debug('message', message, 'options', options);
  if (typeof message !== 'object') throw new Error('Message argument is required');
  const res = await transport.sendMail(message);
  const parsed = await simpleParser(res.message);
  const html = await renderFilePromise(options.template, Object.assign(parsed, {
    cache: true,
    pretty: true,
    dayjs
  }));
  const filePath = `${options.dir}/${options.id}.html`;
  debug('filePath', filePath);
  await writeFile(filePath, html);
  const url = options.urlTransform(filePath);
  if (options.open) await open(url, options.open);
  return url;
};

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJvcyIsInBhdGgiLCJkYXlqcyIsImRlYnVnIiwibm9kZW1haWxlciIsIm9wZW4iLCJwaWZ5IiwicHVnIiwidXVpZCIsInNpbXBsZVBhcnNlciIsIndyaXRlRmlsZSIsInRyYW5zcG9ydCIsImNyZWF0ZVRyYW5zcG9ydCIsInN0cmVhbVRyYW5zcG9ydCIsImJ1ZmZlciIsInRlbXBsYXRlRmlsZVBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwicmVuZGVyRmlsZVByb21pc2UiLCJyZW5kZXJGaWxlIiwicHJldmlld0VtYWlsIiwibWVzc2FnZSIsIm9wdGlvbnMiLCJkaXIiLCJ0bXBkaXIiLCJpZCIsInY0Iiwid2FpdCIsInRlbXBsYXRlIiwidXJsVHJhbnNmb3JtIiwiRXJyb3IiLCJyZXMiLCJzZW5kTWFpbCIsInBhcnNlZCIsImh0bWwiLCJPYmplY3QiLCJhc3NpZ24iLCJjYWNoZSIsInByZXR0eSIsImZpbGVQYXRoIiwidXJsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLGVBQWpCLENBQWQ7O0FBQ0EsTUFBTUssVUFBVSxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFDQSxNQUFNTSxJQUFJLEdBQUdOLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHUixPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFDQSxNQUFNUyxJQUFJLEdBQUdULE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRVUsRUFBQUE7QUFBRixJQUFtQlYsT0FBTyxDQUFDLFlBQUQsQ0FBaEM7O0FBRUEsTUFBTVcsU0FBUyxHQUFHSixJQUFJLENBQUNSLEVBQUUsQ0FBQ1ksU0FBSixDQUF0QjtBQUVBLE1BQU1DLFNBQVMsR0FBR1AsVUFBVSxDQUFDUSxlQUFYLENBQTJCO0FBQzNDQyxFQUFBQSxlQUFlLEVBQUUsSUFEMEI7QUFFM0NDLEVBQUFBLE1BQU0sRUFBRTtBQUZtQyxDQUEzQixDQUFsQjtBQUtBLE1BQU1DLGdCQUFnQixHQUFHZCxJQUFJLENBQUNlLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixjQUEzQixDQUF6QjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHWixJQUFJLENBQUNDLEdBQUcsQ0FBQ1ksVUFBTCxDQUE5Qjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsT0FBT0MsT0FBUCxFQUFnQkMsT0FBaEIsS0FBNEI7QUFDL0NBLEVBQUFBLE9BQU87QUFDTEMsSUFBQUEsR0FBRyxFQUFFdkIsRUFBRSxDQUFDd0IsTUFBSCxFQURBO0FBRUxDLElBQUFBLEVBQUUsRUFBRWpCLElBQUksQ0FBQ2tCLEVBQUwsRUFGQztBQUdMckIsSUFBQUEsSUFBSSxFQUFFO0FBQUVzQixNQUFBQSxJQUFJLEVBQUU7QUFBUixLQUhEO0FBSUxDLElBQUFBLFFBQVEsRUFBRWIsZ0JBSkw7QUFLTGMsSUFBQUEsWUFBWSxFQUFFNUIsSUFBSSxJQUFLLFVBQVNBLElBQUs7QUFMaEMsS0FNRnFCLE9BTkUsQ0FBUDtBQVFBbkIsRUFBQUEsS0FBSyxDQUFDLFNBQUQsRUFBWWtCLE9BQVosRUFBcUIsU0FBckIsRUFBZ0NDLE9BQWhDLENBQUw7QUFFQSxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFDRSxNQUFNLElBQUlTLEtBQUosQ0FBVSw4QkFBVixDQUFOO0FBRUYsUUFBTUMsR0FBRyxHQUFHLE1BQU1wQixTQUFTLENBQUNxQixRQUFWLENBQW1CWCxPQUFuQixDQUFsQjtBQUVBLFFBQU1ZLE1BQU0sR0FBRyxNQUFNeEIsWUFBWSxDQUFDc0IsR0FBRyxDQUFDVixPQUFMLENBQWpDO0FBRUEsUUFBTWEsSUFBSSxHQUFHLE1BQU1oQixpQkFBaUIsQ0FDbENJLE9BQU8sQ0FBQ00sUUFEMEIsRUFFbENPLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxNQUFkLEVBQXNCO0FBQ3BCSSxJQUFBQSxLQUFLLEVBQUUsSUFEYTtBQUVwQkMsSUFBQUEsTUFBTSxFQUFFLElBRlk7QUFHcEJwQyxJQUFBQTtBQUhvQixHQUF0QixDQUZrQyxDQUFwQztBQVNBLFFBQU1xQyxRQUFRLEdBQUksR0FBRWpCLE9BQU8sQ0FBQ0MsR0FBSSxJQUFHRCxPQUFPLENBQUNHLEVBQUcsT0FBOUM7QUFDQXRCLEVBQUFBLEtBQUssQ0FBQyxVQUFELEVBQWFvQyxRQUFiLENBQUw7QUFDQSxRQUFNN0IsU0FBUyxDQUFDNkIsUUFBRCxFQUFXTCxJQUFYLENBQWY7QUFFQSxRQUFNTSxHQUFHLEdBQUdsQixPQUFPLENBQUNPLFlBQVIsQ0FBcUJVLFFBQXJCLENBQVo7QUFDQSxNQUFJakIsT0FBTyxDQUFDakIsSUFBWixFQUFrQixNQUFNQSxJQUFJLENBQUNtQyxHQUFELEVBQU1sQixPQUFPLENBQUNqQixJQUFkLENBQVY7QUFFbEIsU0FBT21DLEdBQVA7QUFDRCxDQW5DRDs7QUFxQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRCLFlBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgZGF5anMgPSByZXF1aXJlKCdkYXlqcycpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdwcmV2aWV3LWVtYWlsJyk7XG5jb25zdCBub2RlbWFpbGVyID0gcmVxdWlyZSgnbm9kZW1haWxlcicpO1xuY29uc3Qgb3BlbiA9IHJlcXVpcmUoJ29wZW4nKTtcbmNvbnN0IHBpZnkgPSByZXF1aXJlKCdwaWZ5Jyk7XG5jb25zdCBwdWcgPSByZXF1aXJlKCdwdWcnKTtcbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJyk7XG5jb25zdCB7IHNpbXBsZVBhcnNlciB9ID0gcmVxdWlyZSgnbWFpbHBhcnNlcicpO1xuXG5jb25zdCB3cml0ZUZpbGUgPSBwaWZ5KGZzLndyaXRlRmlsZSk7XG5cbmNvbnN0IHRyYW5zcG9ydCA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAgc3RyZWFtVHJhbnNwb3J0OiB0cnVlLFxuICBidWZmZXI6IHRydWVcbn0pO1xuXG5jb25zdCB0ZW1wbGF0ZUZpbGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3RlbXBsYXRlLnB1ZycpO1xuXG5jb25zdCByZW5kZXJGaWxlUHJvbWlzZSA9IHBpZnkocHVnLnJlbmRlckZpbGUpO1xuXG5jb25zdCBwcmV2aWV3RW1haWwgPSBhc3luYyAobWVzc2FnZSwgb3B0aW9ucykgPT4ge1xuICBvcHRpb25zID0ge1xuICAgIGRpcjogb3MudG1wZGlyKCksXG4gICAgaWQ6IHV1aWQudjQoKSxcbiAgICBvcGVuOiB7IHdhaXQ6IGZhbHNlIH0sXG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlRmlsZVBhdGgsXG4gICAgdXJsVHJhbnNmb3JtOiBwYXRoID0+IGBmaWxlOi8vJHtwYXRofWAsXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuICBkZWJ1ZygnbWVzc2FnZScsIG1lc3NhZ2UsICdvcHRpb25zJywgb3B0aW9ucyk7XG5cbiAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAnb2JqZWN0JylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01lc3NhZ2UgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcblxuICBjb25zdCByZXMgPSBhd2FpdCB0cmFuc3BvcnQuc2VuZE1haWwobWVzc2FnZSk7XG5cbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgc2ltcGxlUGFyc2VyKHJlcy5tZXNzYWdlKTtcblxuICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyRmlsZVByb21pc2UoXG4gICAgb3B0aW9ucy50ZW1wbGF0ZSxcbiAgICBPYmplY3QuYXNzaWduKHBhcnNlZCwge1xuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICBwcmV0dHk6IHRydWUsXG4gICAgICBkYXlqc1xuICAgIH0pXG4gICk7XG5cbiAgY29uc3QgZmlsZVBhdGggPSBgJHtvcHRpb25zLmRpcn0vJHtvcHRpb25zLmlkfS5odG1sYDtcbiAgZGVidWcoJ2ZpbGVQYXRoJywgZmlsZVBhdGgpO1xuICBhd2FpdCB3cml0ZUZpbGUoZmlsZVBhdGgsIGh0bWwpO1xuXG4gIGNvbnN0IHVybCA9IG9wdGlvbnMudXJsVHJhbnNmb3JtKGZpbGVQYXRoKTtcbiAgaWYgKG9wdGlvbnMub3BlbikgYXdhaXQgb3Blbih1cmwsIG9wdGlvbnMub3Blbik7XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJldmlld0VtYWlsO1xuIl19